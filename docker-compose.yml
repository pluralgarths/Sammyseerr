version: "3.8"

services:
  nginx:
    image: nginx:stable-alpine
    container_name: nginx_proxy
    depends_on:
      - app
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - mainnet

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: my_app
    ports:
      - "3000:3000"
    environment:
      POSTGRES_HOST: db
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      - db
      - redis
    networks:
      - mainnet

  db:
    image: postgres:14-alpine
    container_name: postgres_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d # Runs init.sql if DB is empty
    networks:
      - mainnet

  redis:
    image: redis:6-alpine
    container_name: redis_cache
    networks:
      - mainnet

  scraper:
    build:
      context: ./scraper # Assuming your Python script is inside the 'scraper' directory
      dockerfile: Dockerfile
    container_name: sam_scraper
    volumes:
      - ./scraper:/app/scripts # Mounts scripts for execution
      - ./sam_json_data:/app/data # Stores JSON data
      - ./sam_opportunities.json:/app/data/sam_opportunities.json # Ensures data persistence
    working_dir: /app/scripts
    command: ["python", "load_sam_data.py"] # Automatically loads data
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
    depends_on:
      - db
    networks:
      - mainnet

volumes:
  db_data:

networks:
  mainnet:
