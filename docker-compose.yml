services:
  nginx:
    image: nginx:stable-alpine
    container_name: nginx_proxy
    depends_on:
      - app
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - mainnet

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${DB_ADMIN}
      PGADMIN_DEFAULT_PASSWORD: ${DB_ADMIN_PASSWORD}
    ports:
      - "8081:80"
    depends_on:
      db:
        condition: service_healthy  # Ensure PostgreSQL is fully ready
    volumes:
      - pgadmin_data:/var/lib/pgadmin  # Correct placement
    networks:
      - mainnet

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: my_app
    ports:
      - "3000:3000"
    environment:
      POSTGRES_HOST: db
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      - db
      - redis
    networks:
      - mainnet

  db:
    image: postgres:14-alpine
    container_name: postgres_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      ADMIN_USERNAME: ${DB_ADMIN}
      ADMIN_PASSWORD: ${DB_ADMIN_PASSWORD}
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d  # Runs init.sql if DB is empty
    networks:
      - mainnet
    healthcheck:  # Ensure PostgreSQL is fully initialized before starting `pgAdmin`
      test: ["CMD", "pg_isready", "-U", "${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6-alpine
    container_name: redis_cache
    networks:
      - mainnet

  scraper:
    build:
     context: ./scraper
     dockerfile: Dockerfile
    container_name: sam_scraper
    volumes:
      - ./scraper:/app/scripts
      - ./SamDataOutTest:/data  # Mounts JSON data
    working_dir: /app/scripts
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - ENV=test
    depends_on:
      - db
      - redis
    networks:
      - mainnet
volumes:
  db_data:
  pgadmin_data:  # Add missing volume

networks:
  mainnet:
