services:
  nginx:
    image: nginx:stable-alpine
    container_name: nginx_proxy
    depends_on:
      - app
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - mainnet

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${DB_ADMIN}
      PGADMIN_DEFAULT_PASSWORD: ${DB_ADMIN_PASSWORD}
    ports:
      - "8081:80"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - mainnet

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: my_app
    ports:
      - "3000:3000"
    environment:
      POSTGRES_HOST: db
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - mainnet

  db:
    image: postgres:14-alpine
    container_name: postgres_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    command: >
      sh -c "
      apk add --no-cache gettext &&
      envsubst < /docker-entrypoint-initdb.d/02-seed.sql.template > /docker-entrypoint-initdb.d/02-seed.sql &&
      docker-entrypoint.sh postgres"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      retries: 5
    networks:
      - mainnet

  redis:
    image: redis:6-alpine
    container_name: redis_cache
    networks:
      - mainnet

  scraper:
    build:
      context: ./scraper
      dockerfile: Dockerfile
    container_name: sam_scraper
    volumes:
      - ./scraper:/app/scripts
      - ./SamDataOutTest:/data
    working_dir: /app/scripts
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      ENV: test
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - mainnet

  postgrest:
    image: postgrest/postgrest
    container_name: postgrest
    environment:
      PGRST_DB_URI: postgres://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      PGRST_DB_SCHEMA: public
      PGRST_DB_ANON_ROLE: ${DB_USER}
      PGRST_SERVER_PORT: 3001
    depends_on:
      db:
        condition: service_healthy
    networks:
      - mainnet
    ports:
      - "3001:3001"

volumes:
  db_data:
  pgadmin_data:

networks:
  mainnet:
