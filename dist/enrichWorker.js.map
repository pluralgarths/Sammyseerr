{"version":3,"file":"enrichWorker.js","sourceRoot":"","sources":["../src/enrichWorker.ts"],"names":[],"mappings":";;;;;AA4CA,0CAEC;AA9CD,mCAAuC;AACvC,6BAA4B;AAC5B,oDAA4B;AAE5B,MAAM,eAAe,GAAG,IAAI,cAAK,CAAC,eAAe,EAAE;IACjD,UAAU,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE;CAC1C,CAAC,CAAC;AAEH,KAAK,UAAU,UAAU,CAAC,EAAU,EAAE,KAAa,EAAE,OAAe;IAClE,OAAO,CAAC,GAAG,CAAC,sBAAsB,EAAE,KAAK,CAAC,CAAC;IAE3C,IAAI,YAAY,CAAC;IACjB,IAAI,CAAC;QACH,MAAM,QAAQ,GAAG,MAAM,gBAAM,CAAC,QAAQ,CAAC;YACrC,KAAK,EAAE,UAAU;YACjB,MAAM,EAAE,cAAc,KAAK,MAAM,OAAO,EAAE;SAC3C,CAAC,CAAC;QACH,YAAY,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC;IACtC,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,OAAO,CAAC,KAAK,CAAC,qBAAqB,EAAE,GAAG,CAAC,CAAC;QAC1C,OAAO;IACT,CAAC;IAED,MAAM,SAAI,CAAC,KAAK,CACd,2DAA2D,EAC3D,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,YAAY,EAAE,CAAC,EAAE,EAAE,CAAC,CAChD,CAAC;IAEF,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,yBAAyB,CAAC,CAAC;AACvD,CAAC;AAED,uCAAuC;AACvC,IAAI,eAAM,CACR,eAAe,EACf,KAAK,EAAE,GAAG,EAAE,EAAE;IACZ,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;IACxC,MAAM,UAAU,CAAC,EAAE,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;AACvC,CAAC,EACD;IACE,UAAU,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE;CAC1C,CACF,CAAC;AAEF,oCAAoC;AAC7B,KAAK,UAAU,eAAe,CAAC,EAAU,EAAE,KAAa,EAAE,OAAe;IAC9E,MAAM,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;AAC9D,CAAC","sourcesContent":["import { Queue, Worker } from \"bullmq\";\nimport { pool } from \"./db\";\nimport ollama from \"ollama\";\n\nconst enrichmentQueue = new Queue(\"ai_enrichment\", {\n  connection: { host: \"redis\", port: 6379 },\n});\n\nasync function enrichData(id: number, title: string, details: string) {\n  console.log(`Enriching contract ${id}...`);\n\n  let enrichedText;\n  try {\n    const response = await ollama.generate({\n      model: \"deepseek\",\n      prompt: `Summarize: ${title} - ${details}`,\n    });\n    enrichedText = response.data.output;\n  } catch (err) {\n    console.error(\"Error using Ollama:\", err);\n    return;\n  }\n\n  await pool.query(\n    \"UPDATE opportunities SET enriched_data = $1 WHERE id = $2\",\n    [JSON.stringify({ summary: enrichedText }), id]\n  );\n\n  console.log(`Contract ${id} enriched successfully!`);\n}\n\n// Worker to process AI enrichment jobs\nnew Worker(\n  \"ai_enrichment\",\n  async (job) => {\n    const { id, title, details } = job.data;\n    await enrichData(id, title, details);\n  },\n  {\n    connection: { host: \"redis\", port: 6379 },\n  }\n);\n\n// Function to add jobs to the queue\nexport async function queueEnrichment(id: number, title: string, details: string) {\n  await enrichmentQueue.add(\"enrich\", { id, title, details });\n}\n"]}